{
  "version": 3,
  "sources": ["../../node_modules/@emailjs/browser/es/models/EmailJSResponseStatus.js", "../../node_modules/@emailjs/browser/es/utils/createWebStorage/createWebStorage.js", "../../node_modules/@emailjs/browser/es/store/store.js", "../../node_modules/@emailjs/browser/es/utils/buildOptions/buildOptions.js", "../../node_modules/@emailjs/browser/es/methods/init/init.js", "../../node_modules/@emailjs/browser/es/api/sendPost.js", "../../node_modules/@emailjs/browser/es/utils/validateParams/validateParams.js", "../../node_modules/@emailjs/browser/es/utils/validateTemplateParams/validateTemplateParams.js", "../../node_modules/@emailjs/browser/es/utils/isHeadless/isHeadless.js", "../../node_modules/@emailjs/browser/es/errors/headlessError/headlessError.js", "../../node_modules/@emailjs/browser/es/utils/validateBlockListParams/validateBlockListParams.js", "../../node_modules/@emailjs/browser/es/utils/isBlockedValueInParams/isBlockedValueInParams.js", "../../node_modules/@emailjs/browser/es/errors/blockedEmailError/blockedEmailError.js", "../../node_modules/@emailjs/browser/es/utils/validateLimitRateParams/validateLimitRateParams.js", "../../node_modules/@emailjs/browser/es/utils/isLimitRateHit/isLimitRateHit.js", "../../node_modules/@emailjs/browser/es/errors/limitRateError/limitRateError.js", "../../node_modules/@emailjs/browser/es/methods/send/send.js", "../../node_modules/@emailjs/browser/es/utils/validateForm/validateForm.js", "../../node_modules/@emailjs/browser/es/methods/sendForm/sendForm.js", "../../node_modules/@emailjs/browser/es/index.js"],
  "sourcesContent": ["export class EmailJSResponseStatus {\r\n    constructor(_status = 0, _text = 'Network Error') {\r\n        this.status = _status;\r\n        this.text = _text;\r\n    }\r\n}\r\n", "export const createWebStorage = () => {\r\n    if (typeof localStorage === 'undefined')\r\n        return;\r\n    return {\r\n        get: (key) => Promise.resolve(localStorage.getItem(key)),\r\n        set: (key, value) => Promise.resolve(localStorage.setItem(key, value)),\r\n        remove: (key) => Promise.resolve(localStorage.removeItem(key)),\r\n    };\r\n};\r\n", "import { createWebStorage } from '../utils/createWebStorage/createWebStorage';\r\nexport const store = {\r\n    origin: 'https://api.emailjs.com',\r\n    blockHeadless: false,\r\n    storageProvider: createWebStorage(),\r\n};\r\n", "export const buildOptions = (options) => {\r\n    if (!options)\r\n        return {};\r\n    // support compatibility with SDK v3\r\n    if (typeof options === 'string') {\r\n        return {\r\n            publicKey: options,\r\n        };\r\n    }\r\n    // eslint-disable-next-line @typescript-eslint/no-base-to-string\r\n    if (options.toString() === '[object Object]') {\r\n        return options;\r\n    }\r\n    return {};\r\n};\r\n", "import { store } from '../../store/store';\r\nimport { buildOptions } from '../../utils/buildOptions/buildOptions';\r\n/**\r\n * EmailJS global SDK config\r\n * @param {object} options - the EmailJS global SDK config options\r\n * @param {string} origin - the non-default EmailJS origin\r\n */\r\nexport const init = (options, origin = 'https://api.emailjs.com') => {\r\n    if (!options)\r\n        return;\r\n    const opts = buildOptions(options);\r\n    store.publicKey = opts.publicKey;\r\n    store.blockHeadless = opts.blockHeadless;\r\n    store.storageProvider = opts.storageProvider;\r\n    store.blockList = opts.blockList;\r\n    store.limitRate = opts.limitRate;\r\n    store.origin = opts.origin || origin;\r\n};\r\n", "import { EmailJSResponseStatus } from '../models/EmailJSResponseStatus';\r\nimport { store } from '../store/store';\r\nexport const sendPost = async (url, data, headers = {}) => {\r\n    const response = await fetch(store.origin + url, {\r\n        method: 'POST',\r\n        headers,\r\n        body: data,\r\n    });\r\n    const message = await response.text();\r\n    const responseStatus = new EmailJSResponseStatus(response.status, message);\r\n    if (response.ok) {\r\n        return responseStatus;\r\n    }\r\n    throw responseStatus;\r\n};\r\n", "export const validateParams = (publicKey, serviceID, templateID) => {\r\n    if (!publicKey || typeof publicKey !== 'string') {\r\n        throw 'The public key is required. Visit https://dashboard.emailjs.com/admin/account';\r\n    }\r\n    if (!serviceID || typeof serviceID !== 'string') {\r\n        throw 'The service ID is required. Visit https://dashboard.emailjs.com/admin';\r\n    }\r\n    if (!templateID || typeof templateID !== 'string') {\r\n        throw 'The template ID is required. Visit https://dashboard.emailjs.com/admin/templates';\r\n    }\r\n};\r\n", "export const validateTemplateParams = (templateParams) => {\r\n    // eslint-disable-next-line @typescript-eslint/no-base-to-string\r\n    if (templateParams && templateParams.toString() !== '[object Object]') {\r\n        throw 'The template params have to be the object. Visit https://www.emailjs.com/docs/sdk/send/';\r\n    }\r\n};\r\n", "export const isHeadless = (navigator) => {\r\n    return navigator.webdriver || !navigator.languages || navigator.languages.length === 0;\r\n};\r\n", "import { EmailJSResponseStatus } from '../../models/EmailJSResponseStatus';\r\nexport const headlessError = () => {\r\n    return new EmailJSResponseStatus(451, 'Unavailable For Headless Browser');\r\n};\r\n", "export const validateBlockListParams = (list, watchVariable) => {\r\n    if (!Array.isArray(list)) {\r\n        throw 'The BlockList list has to be an array';\r\n    }\r\n    if (typeof watchVariable !== 'string') {\r\n        throw 'The BlockList watchVariable has to be a string';\r\n    }\r\n};\r\n", "import { validateBlockListParams } from '../validateBlockListParams/validateBlockListParams';\r\nconst isBlockListDisabled = (options) => {\r\n    return !options.list?.length || !options.watchVariable;\r\n};\r\nconst getValue = (data, name) => {\r\n    return data instanceof FormData ? data.get(name) : data[name];\r\n};\r\nexport const isBlockedValueInParams = (options, params) => {\r\n    if (isBlockListDisabled(options))\r\n        return false;\r\n    validateBlockListParams(options.list, options.watchVariable);\r\n    const value = getValue(params, options.watchVariable);\r\n    if (typeof value !== 'string')\r\n        return false;\r\n    return options.list.includes(value);\r\n};\r\n", "import { EmailJSResponseStatus } from '../../models/EmailJSResponseStatus';\r\nexport const blockedEmailError = () => {\r\n    return new EmailJSResponseStatus(403, 'Forbidden');\r\n};\r\n", "export const validateLimitRateParams = (throttle, id) => {\r\n    if (typeof throttle !== 'number' || throttle < 0) {\r\n        throw 'The LimitRate throttle has to be a positive number';\r\n    }\r\n    if (id && typeof id !== 'string') {\r\n        throw 'The LimitRate ID has to be a non-empty string';\r\n    }\r\n};\r\n", "import { validateLimitRateParams } from '../validateLimitRateParams/validateLimitRateParams';\r\nconst getLeftTime = async (id, throttle, storage) => {\r\n    const lastTime = Number((await storage.get(id)) || 0);\r\n    return throttle - Date.now() + lastTime;\r\n};\r\nexport const isLimitRateHit = async (defaultID, options, storage) => {\r\n    if (!options.throttle || !storage) {\r\n        return false;\r\n    }\r\n    validateLimitRateParams(options.throttle, options.id);\r\n    const id = options.id || defaultID;\r\n    const leftTime = await getLeftTime(id, options.throttle, storage);\r\n    if (leftTime > 0) {\r\n        return true;\r\n    }\r\n    await storage.set(id, Date.now().toString());\r\n    return false;\r\n};\r\n", "import { EmailJSResponseStatus } from '../../models/EmailJSResponseStatus';\r\nexport const limitRateError = () => {\r\n    return new EmailJSResponseStatus(429, 'Too Many Requests');\r\n};\r\n", "import { store } from '../../store/store';\r\nimport { sendPost } from '../../api/sendPost';\r\nimport { buildOptions } from '../../utils/buildOptions/buildOptions';\r\nimport { validateParams } from '../../utils/validateParams/validateParams';\r\nimport { validateTemplateParams } from '../../utils/validateTemplateParams/validateTemplateParams';\r\nimport { isHeadless } from '../../utils/isHeadless/isHeadless';\r\nimport { headlessError } from '../../errors/headlessError/headlessError';\r\nimport { isBlockedValueInParams } from '../../utils/isBlockedValueInParams/isBlockedValueInParams';\r\nimport { blockedEmailError } from '../../errors/blockedEmailError/blockedEmailError';\r\nimport { isLimitRateHit } from '../../utils/isLimitRateHit/isLimitRateHit';\r\nimport { limitRateError } from '../../errors/limitRateError/limitRateError';\r\n/**\r\n * Send a template to the specific EmailJS service\r\n * @param {string} serviceID - the EmailJS service ID\r\n * @param {string} templateID - the EmailJS template ID\r\n * @param {object} templateParams - the template params, what will be set to the EmailJS template\r\n * @param {object} options - the EmailJS SDK config options\r\n * @returns {Promise<EmailJSResponseStatus>}\r\n */\r\nexport const send = async (serviceID, templateID, templateParams, options) => {\r\n    const opts = buildOptions(options);\r\n    const publicKey = opts.publicKey || store.publicKey;\r\n    const blockHeadless = opts.blockHeadless || store.blockHeadless;\r\n    const storageProvider = opts.storageProvider || store.storageProvider;\r\n    const blockList = { ...store.blockList, ...opts.blockList };\r\n    const limitRate = { ...store.limitRate, ...opts.limitRate };\r\n    if (blockHeadless && isHeadless(navigator)) {\r\n        return Promise.reject(headlessError());\r\n    }\r\n    validateParams(publicKey, serviceID, templateID);\r\n    validateTemplateParams(templateParams);\r\n    if (templateParams && isBlockedValueInParams(blockList, templateParams)) {\r\n        return Promise.reject(blockedEmailError());\r\n    }\r\n    if (await isLimitRateHit(location.pathname, limitRate, storageProvider)) {\r\n        return Promise.reject(limitRateError());\r\n    }\r\n    const params = {\r\n        lib_version: '4.4.1',\r\n        user_id: publicKey,\r\n        service_id: serviceID,\r\n        template_id: templateID,\r\n        template_params: templateParams,\r\n    };\r\n    return sendPost('/api/v1.0/email/send', JSON.stringify(params), {\r\n        'Content-type': 'application/json',\r\n    });\r\n};\r\n", "export const validateForm = (form) => {\r\n    if (!form || form.nodeName !== 'FORM') {\r\n        throw 'The 3rd parameter is expected to be the HTML form element or the style selector of the form';\r\n    }\r\n};\r\n", "import { store } from '../../store/store';\r\nimport { sendPost } from '../../api/sendPost';\r\nimport { buildOptions } from '../../utils/buildOptions/buildOptions';\r\nimport { validateForm } from '../../utils/validateForm/validateForm';\r\nimport { validateParams } from '../../utils/validateParams/validateParams';\r\nimport { isHeadless } from '../../utils/isHeadless/isHeadless';\r\nimport { headlessError } from '../../errors/headlessError/headlessError';\r\nimport { isBlockedValueInParams } from '../../utils/isBlockedValueInParams/isBlockedValueInParams';\r\nimport { blockedEmailError } from '../../errors/blockedEmailError/blockedEmailError';\r\nimport { isLimitRateHit } from '../../utils/isLimitRateHit/isLimitRateHit';\r\nimport { limitRateError } from '../../errors/limitRateError/limitRateError';\r\nconst findHTMLForm = (form) => {\r\n    return typeof form === 'string' ? document.querySelector(form) : form;\r\n};\r\n/**\r\n * Send a form the specific EmailJS service\r\n * @param {string} serviceID - the EmailJS service ID\r\n * @param {string} templateID - the EmailJS template ID\r\n * @param {string | HTMLFormElement} form - the form element or selector\r\n * @param {object} options - the EmailJS SDK config options\r\n * @returns {Promise<EmailJSResponseStatus>}\r\n */\r\nexport const sendForm = async (serviceID, templateID, form, options) => {\r\n    const opts = buildOptions(options);\r\n    const publicKey = opts.publicKey || store.publicKey;\r\n    const blockHeadless = opts.blockHeadless || store.blockHeadless;\r\n    const storageProvider = store.storageProvider || opts.storageProvider;\r\n    const blockList = { ...store.blockList, ...opts.blockList };\r\n    const limitRate = { ...store.limitRate, ...opts.limitRate };\r\n    if (blockHeadless && isHeadless(navigator)) {\r\n        return Promise.reject(headlessError());\r\n    }\r\n    const currentForm = findHTMLForm(form);\r\n    validateParams(publicKey, serviceID, templateID);\r\n    validateForm(currentForm);\r\n    const formData = new FormData(currentForm);\r\n    if (isBlockedValueInParams(blockList, formData)) {\r\n        return Promise.reject(blockedEmailError());\r\n    }\r\n    if (await isLimitRateHit(location.pathname, limitRate, storageProvider)) {\r\n        return Promise.reject(limitRateError());\r\n    }\r\n    formData.append('lib_version', '4.4.1');\r\n    formData.append('service_id', serviceID);\r\n    formData.append('template_id', templateID);\r\n    formData.append('user_id', publicKey);\r\n    return sendPost('/api/v1.0/email/send-form', formData);\r\n};\r\n", "import { EmailJSResponseStatus } from './models/EmailJSResponseStatus';\r\nimport { init } from './methods/init/init';\r\nimport { send } from './methods/send/send';\r\nimport { sendForm } from './methods/sendForm/sendForm';\r\nexport { init, send, sendForm, EmailJSResponseStatus };\r\nexport default {\r\n    init,\r\n    send,\r\n    sendForm,\r\n    EmailJSResponseStatus,\r\n};\r\n"],
  "mappings": "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",
  "names": ["navigator"]
}
